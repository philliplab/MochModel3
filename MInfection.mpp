partition INCIDENCE_AGE_GROUPS
{
	0, 15, 20, 24, 29, 34, 39, 44, 49, 54, 59, 100
};

range INCIDENCE_RATES_SOURCE
{
	0,2
};

parameters
{
	INCIDENCE_RATES_SOURCE IncidenceRatesSource;
	double IncidenceRates[INCIDENCE_RATES_SOURCE][LIFE];
	double MinInfWait;
	double MaxInfWait;

	double MTreatShape;
	double MTreatScaleOffset;
};

parameter_group MotherIncidence
{ //EN Mothers' Mortality Parameters
	IncidenceRatesSource, IncidenceRates, MinInfWait, MaxInfWait
};

actor Mother            //EN Individual
{
	event timeInfectionEvent, InfectionEvent;
};

TIME Mother::timeInfectionEvent()
{
	TIME tEventTime = TIME_INFINITE;
	if (disease_status == HEALTHY){
		double curr_incidence = IncidenceRates[IncidenceRatesSource][integer_age];
		if (curr_incidence >= 1){
			tEventTime = WAIT(0);
		} else if (curr_incidence > 0){
			tEventTime = WAIT(-log(RandUniform(2)) / -log(1 - curr_incidence));
		};
	};
	return tEventTime;
};

double InvWeibull2(double y, double kappa, double lambda, double phi)
{
	// Lambda is Scale and Kappa is Shape
	double x = 0;
	if (phi == 1000){ // SIGH - this is not a pretty hack - no construct like R's Inf in C++?
		x = pow(10, 10);
	} else
	{
		x = (phi * lambda) * pow(-log(y), 1/kappa);
	};
	return(x);
};

void Mother::InfectionEvent()
{
	disease_status = INFECTED;

	// Produce symptom event time
	double symp_draw = RandUniform(6);
	double symp_par;
	symp_par = ((1 - MIMort_Symp_Corr) * symp_draw) + (MIMort_Symp_Corr * inf_mortality_draw);
	symp_event_time = InvWeibull2(symp_par, MSymptomsShape, MSymptomsScale, MInfectedMortPhi[vdp_age_at_infection]);

	// Produce treatment event time
	double MTreatScale;
	MTreatScale = symp_event_time + MTreatScaleOffset;
	if (MTreatScale <= 0.1)
	{
		MTreatScale = 0.1;
	}
	double treat_draw = RandUniform(8);
	treat_event_time = InvWeibull2(treat_draw, MTreatShape, MTreatScale, 1);

	vdp_age_at_infection = vdp_age_int;

	int nIndex = {-1};
	Child *prChild = {NULL};
	while (prChild = mlChild->GetNext(nIndex+1, &nIndex))
	{
		prChild->Mother_Infect();
	}
};
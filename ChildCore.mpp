parameters
{
	CHILD_MODEL_TYPE ChildModelType;
	double PropChildrenFemale;
};

classification CHILD_MODEL_TYPE
{
	SCHOOLING,
	RISK_FACTORS
};

classification GENDER
{
	F, M
};

actor_set Child asAllChild; //EN All Child actors

actor Child            //EN Individual
{
	REPORT_TIME report_time = { 0 };
	DISEASE_STATE mother_disease_status_fm = {HEALTHY};
	DISEASE_STATE_DETAILED mother_disease_status_detailed_fm = {HEALTHY_};
	DISEASE_STATE_DETAILED mother_dsd_at_dropout;
	logical mother_showing_symptoms = {FALSE};
	GENDER gender;
	LIFE integer_age = self_scheduling_int(age);
	double mother_age_at_birth = {0};

	void Mother_Infect();
	void Mother_Die();
	void Mother_Symptoms();
	void Mother_Treat();
	void Mother_Diagnose();
	void Set_Mother_Age(double m_age);
	void Start();
	void Finish();
};

void Child::Mother_Infect()
{
	mother_disease_status_fm = INFECTED;
	mother_disease_status_detailed_fm = INFECTED_;
};

void Child::Mother_Die()
{
	mother_disease_status_fm = DEAD;
	mother_disease_status_detailed_fm = DEAD_;
};

void Child::Mother_Symptoms()
{
	mother_showing_symptoms = TRUE;
	mother_disease_status_detailed_fm = SYMPTOMS_;
};

void Child::Mother_Treat()
{
	mother_disease_status_fm = TREATED;
	mother_showing_symptoms = FALSE;
	mother_disease_status_detailed_fm = TREATED_;
};

void Child::Mother_Diagnose()
{
	mother_disease_status_detailed_fm = DIAGNOSED_;
};

void Child::Set_Mother_Age(double m_age)
{
	mother_age_at_birth = m_age;
};

void Child::Start()
{
	age = 0;
	if (RandUniform(15) > PropChildrenFemale){
		gender = M;
	} else {
		gender = F;
	};
};

void Child::Finish()
{
};

track Child
	[actor_id % 50 == 0, GetReplicate() == 0 ]
{
	all_base_states,
	all_derived_states
};
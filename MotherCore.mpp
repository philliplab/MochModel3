range LIFE
{
	0, 100
};

partition VAN_DER_PAAL_AGES
{
	13, 25, 35, 45
};

range VAN_DER_PAAL_INDX
{
	0,4
};

classification SOCIO_ECONOMIC_STATE
{
	HIGH, LOW
};

parameters 
{
	int		StartingPopulationSize;
	SOCIO_ECONOMIC_STATE socio_economic_status;
};

parameter_group MothCore
{ //EN Mothers' Mortality Parameters
	StartingPopulationSize, ChildModelType
};

classification DISEASE_STATE
{
	HEALTHY,
	INFECTED,
	TREATED,
	DEAD
};

classification DISEASE_STATE_DETAILED
{
	HEALTHY_,
	INFECTED_,
	SYMPTOMS_,
	DIAGNOSED_,
	TREATED_,
	DEAD_
};

actor_set Mother asAllMother; //EN All Mother actors

actor Mother            //EN Individual
{
	DISEASE_STATE disease_status = {HEALTHY};
	DISEASE_STATE_DETAILED disease_status_detailed = {HEALTHY_};
	REPORT_TIME report_time = { 0 };
	LIFE integer_age = self_scheduling_int(age);
	VAN_DER_PAAL_INDX vdp_age_int = self_scheduling_split(age, VAN_DER_PAAL_AGES);
	VAN_DER_PAAL_INDX vdp_age_at_infection = {4};
	VAN_DER_PAAL_INDX vdp_age_at_symptoms = {4};
	logical alive = {TRUE};
	double inf_mortality_draw = {-1};
	logical showing_symptoms = {FALSE};

	void Start();
	void Finish();
};

void Mother::Start()
{
	age = 0;
	time = 0;
	inf_mortality_draw = RandUniform(3);
}

void Mother::Finish()
{
};

track Mother
	[actor_id % 50 == 0, GetReplicate() == 0 ]
{
	all_base_states,
	all_derived_states
};
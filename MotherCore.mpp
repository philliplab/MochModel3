//LABEL(MotherCore, EN) The Mother Actor

range LIFE
{
	0, 100
};

/* NOTE(LIFE, EN)
    Actors are only allowed to live to age 100
*/

partition VAN_DER_PAAL_AGES
{
	13, 25, 35, 45
};

/* NOTE(VAN_DER_PAAL_AGES, EN)
    The survival curves presented in the Van der Paal article
	is grouped in to 5 different groups bounded by 13, 25, 35, 45, and Infinity
*/

range VAN_DER_PAAL_INDX //EN Van der Paal Age Index
{
	0,4
};

/* NOTE(VAN_DER_PAAL_INDX, EN)
    The survival curves presented in the Van der Paal article
	is grouped in to 5 different groups bounded by 13, 25, 35, 45, and Infinity
*/

classification SOCIO_ECONOMIC_STATE
{
	HIGH, LOW
};


/* NOTE(SOCIO_ECONOMIC_STATE, EN)
    The socioeconomic status of the mothers. It is assumed that this state cannot change. 
*/


parameters 
{
	int		StartingPopulationSize; //EN Starting Population Size
	double PercentageHighSES; //EN Percentage of Mothers in the High Socioeconomic class
};

/* NOTE(StartingPopulationSize, EN)
    The number of mothers to simulate
*/

parameter_group MochCore
{ //EN Mothers' Mortality Parameters
	StartingPopulationSize, ChildModelType, PropChildrenFemale, PercentageHighSES
};

classification DISEASE_STATE_DATA
{
	HEALTHY,
	INFECTED,
	SYMPTOMS,
	DEAD
};

/* NOTE(DISEASE_STATE_DATA, EN)
    A simple classification of disease state of the mothers. It matches the disease state used to
	index the parameters affecting child transitions. This is only used internally
	by the model. It is augmented with logical variables like showing_symptoms and diagnosed.
	Having two different sets of disease states were required in order to have
	fine enough control over the scheduling of the events.
*/

classification DISEASE_STATE_DETAILED
{
	HEALTHY_,
	INFECTED_,
	SYMPTOMS_,
	DIAGNOSED_,
	SYMPTOMS_DIAGNOSED_,
	TREATED_,
	TREATMENT_STOPPED_,
	DEAD_
};

/* NOTE(DISEASE_STATE_DETAILED, EN)
    The disease states used in reporting. This includes all disease states and is not augmented with
	any other variables. Having two different sets of disease states were required in order to have
	fine enough control over the scheduling of the events.
*/

actor_set Mother asAllMother; //EN All Mother actors

actor Mother            //EN Mother
{
	SOCIO_ECONOMIC_STATE ses = {LOW}; //EN Socioeconomic Status
	DISEASE_STATE disease_status = {HEALTHY};
	DISEASE_STATE_DETAILED disease_status_detailed = {HEALTHY_};
	REPORT_TIME report_time = { 0 };
	LIFE integer_age = self_scheduling_int(age);
	VAN_DER_PAAL_INDX vdp_age_int = self_scheduling_split(age, VAN_DER_PAAL_AGES);
	VAN_DER_PAAL_INDX vdp_age_at_infection = {4};
	VAN_DER_PAAL_INDX vdp_age_at_symptoms = {4};
	logical alive = {TRUE};
	double inf_mortality_draw = {-1}; //EN Random Draw for Mortality after Infection
	logical showing_symptoms = {FALSE};

	void Start();
	void Finish();
};
/* NOTE(Mother.inf_mortality_draw, EN)
    The random number used to schedule death after infection. This draw must be available to the
	module that schedules the transition into the symptoms state so that the two events can be
	correlated. Hence this draw is saved as a property of the mother instead of just being
	a local variable in the MMortality module.
*/

void Mother::Start()
{
	age = 0;
	time = 0;
	inf_mortality_draw = RandUniform(3);
	if (RandUniform(13) > PercentageHighSES){
	    ses = LOW;
	} else {
	    ses = HIGH;
	};
}

void Mother::Finish()
{
};

track Mother
	[actor_id % 50 == 0, GetReplicate() == 0 ]
{
	all_base_states,
	all_derived_states
};
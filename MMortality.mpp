//LABEL(MMortality, EN) Mortality functions for Mothers

/* NOTE(MMortality, EN)
	This module contains all the mortality functions for the mothers. There
	are three different types of mortality implemented:

	- Mortality for Healthy Mothers
	- Mortality for Infected Mothers
	- Mortality for Treated Mothers

	Mortality for Healthy Mothers

	- Data source and assumptions

	The 2008 ASSA model was used to obtain HIV-free mortality estimates. The
	ASSA model was run with 0% chance of transmitting HIV. This means that
	all the mortality that the model produced was due to factors other than
	HIV. The model was run for 40 years (1985 to 2025). The populations of 
	Males and Females were extracted from the Population worksheet. The
	extract included ages 0 to 90. A life table was constructed for each
	modelled year by assuming that the population at age 0 was the initial
	population and the populations for each subsequent years are those
	that survived to those respective ages. Is is assumed that all people
	alive at age 90 die between ages 90 and 91 according to a uniform
	distribution.

	This is not a good way to construct mortality tables since it does not
	account for new migrations or for imigrants currently in the population.

	Another way to approach this might be to use the predicted deaths in
	the population and to compare that to the population. That can then be
	used to compute the probability of dying in each year. Migration might
	again cause issues with this approch.

	Perhaps the best would be to use the second apprach AND to switch off
	migration? Or should one rather consult the documentation for the model
	and use the same formulas to construct mortality functions instead?

	Note another issue introduced in the description of the implementation
	details below. I am now convinced that the best way to implement mortality
	is with annual death probabilities and to redraw events each year.

	- Implementation Details

	A Kaplan-Meier curve was constructed using the life table from above.
	This Kaplan-Meier curve depends on the gender of the subject. The curve
	is constructed by reading of the lx value that the mother will be exposed
	to in each year. This causes another issue namely, the Kaplan-Meier curve
	is not neccesarily monotonically decreasing.

	A random uniform number is drawn for a mother. This random number is
	placed on the y axis of the Kaplan-Meier curve and the age of death
	is read off from the x-axis. Linear interpolation is used to assign
	ages on a continuous scale.

	Mortality for Infected Mothers

	TODO - detailed documentation (1 - Weibull CDF)

    Mortality for Treated Mothers

	TODO - detailed documentation (1 - Weibull CDF)	
	*/

range MORT_LIFE
{
	0,90
};

range MORT_TIME
{
	0,40
};

parameters
{
	double MInfectedMortShape;
	double MInfectedMortScale;
	double MInfectedMortPhi[VAN_DER_PAAL_INDX];

	double DefaultTimeToDeath;

	double MSymptomsMortShape;
	double MSymptomsMortScale;

	double MHealthyMortShape;
	double MHealthyMortScale;

	double MTreatedMortShape;
	double MTreatedMortScale;

	double MIMort_SMort_Corr;

	double HIVFreeLifeTable[GENDER][MORT_LIFE][MORT_TIME];
};

parameter_group MotherMortality
{ //EN Mothers' Mortality Parameters
	MInfectedMortShape, MInfectedMortScale, MInfectedMortPhi, DefaultTimeToDeath, MSymptomsMortShape, 
	MSymptomsMortScale, MTreatedMortShape, MTreatedMortScale, MIMort_SMort_Corr
};

parameter_group Deprecated
{
	MHealthyMortShape, MHealthyMortScale, CHealthyMortShape, CHealthyMortScale, IncidenceRatesSource, IncidenceRates
};

actor Mother            //EN Individual
{
	event timeMortalityEvent, MortalityEvent;	//EN Mortality event
};

double InvWeibull(double y, double kappa, double lambda, double phi)
{
	// Lambda is Scale and Kappa is Shape
	double x = 0;
	if (phi == 1000){ // SIGH - this is not a pretty hack - no construct like R's Inf in C++?
		x = pow(10, 10);
	} else
	{
		x = (phi * lambda) * pow(-log(y), 1/kappa);
	};
	return(x);
};

double LifeTableDraw(double x)
{
	int indx = -1;
	double prev_lx = 1;
	double lx = 1;
	int time_indx = 0;
	while (x <= lx)
	{
		indx++;
		time_indx = indx > 40 ? 40 : indx;
		prev_lx = lx;
		lx = HIVFreeLifeTable[F][indx][time_indx];
	};
	if (indx == -1){
		indx = 0;
	}; // Small correction for when mother dies between ages 0 and 1.
	return(indx + ((x - lx) / (prev_lx - lx)));
};

TIME Mother::timeMortalityEvent()
{
	TIME tEventTime = TIME_INFINITE;
	double draw = RandUniform(7);

	switch(disease_status)
	{
	case HEALTHY:
		{
			tEventTime = LifeTableDraw(draw);
		}
		break;
	case INFECTED:
		{
			if (showing_symptoms == TRUE)
			{
				// get prev time
				// return the prev time again
				// see what happens if return null
				double symp_mort_par = (1 - MIMort_SMort_Corr) * draw + MIMort_SMort_Corr * inf_mortality_draw;
				tEventTime = InvWeibull(symp_mort_par, MSymptomsMortShape, MSymptomsMortScale, MInfectedMortPhi[vdp_age_at_symptoms]);
			} else
			{
				tEventTime = InvWeibull(inf_mortality_draw, MInfectedMortShape, MInfectedMortScale, MInfectedMortPhi[vdp_age_at_infection]);
			};
		}
		break;
	case TREATED:
		{
			tEventTime = InvWeibull(draw, MTreatedMortShape, MTreatedMortScale, 1);
		}
		break;
	default:
		{
			tEventTime = DefaultTimeToDeath;
		}
		break;
	};
	tEventTime = WAIT(tEventTime);
	return tEventTime;
};

void Mother::MortalityEvent()
{
	alive = FALSE;
	disease_status = DEAD;
	disease_status_detailed = DEAD_;
	int nIndex = {-1};
	Child *prChild = {NULL};
	while (prChild = mlChild->GetNext(nIndex+1, &nIndex))
	{
		prChild->Mother_Die();
	}
	Finish();
};
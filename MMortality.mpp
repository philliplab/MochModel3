range MORT_LIFE
{
	0,90
};

range MORT_TIME
{
	0,40
};

parameters
{
	double MInfectedMortShape;
	double MInfectedMortScale;
	double MInfectedMortPhi[VAN_DER_PAAL_INDX];

	double DefaultTimeToDeath;

	double MSymptomsMortShape;
	double MSymptomsMortScale;

	double MHealthyMortShape;
	double MHealthyMortScale;

	double MTreatedMortShape;
	double MTreatedMortScale;

	double MIMort_SMort_Corr;

	double HIVFreeLifeTable[GENDER][MORT_LIFE][MORT_TIME];
};

parameter_group MotherMortality
{ //EN Mothers' Mortality Parameters
	MInfectedMortShape, MInfectedMortScale, MInfectedMortPhi, DefaultTimeToDeath, MSymptomsMortShape, 
	MSymptomsMortScale, MTreatedMortShape, MTreatedMortScale, MIMort_SMort_Corr
};

parameter_group Deprecated
{
	MHealthyMortShape, MHealthyMortScale, CHealthyMortShape, CHealthyMortScale, IncidenceRatesSource, IncidenceRates
};

actor Mother            //EN Individual
{
	event timeMortalityEvent, MortalityEvent;	//EN Mortality event
};

double InvWeibull(double y, double kappa, double lambda, double phi)
{
	// Lambda is Scale and Kappa is Shape
	double x = 0;
	if (phi == 1000){ // SIGH - this is not a pretty hack - no construct like R's Inf in C++?
		x = pow(10, 10);
	} else
	{
		x = (phi * lambda) * pow(-log(y), 1/kappa);
	};
	return(x);
};

double LifeTableDraw(double x)
{
	int indx = -1;
	double prev_lx = 1;
	double lx = 1;
	int time_indx = 0;
	while (x <= lx)
	{
		indx++;
		time_indx = indx > 40 ? 40 : indx;
		prev_lx = lx;
		lx = HIVFreeLifeTable[F][indx][time_indx];
	};
	return(indx + ((x - lx) / (prev_lx - lx)));
};

TIME Mother::timeMortalityEvent()
{
	TIME tEventTime = TIME_INFINITE;
	double draw = RandUniform(7);

	switch(disease_status)
	{
	case HEALTHY:
		{
			tEventTime = LifeTableDraw(draw);
		}
		break;
	case INFECTED:
		{
			if (showing_symptoms == TRUE)
			{
				// get prev time
				// return the prev time again
				// see what happens if return null
				double symp_mort_par = (1 - MIMort_SMort_Corr) * draw + MIMort_SMort_Corr * inf_mortality_draw;
				tEventTime = InvWeibull(symp_mort_par, MSymptomsMortShape, MSymptomsMortScale, MInfectedMortPhi[vdp_age_at_symptoms]);
			} else
			{
				tEventTime = InvWeibull(inf_mortality_draw, MInfectedMortShape, MInfectedMortScale, MInfectedMortPhi[vdp_age_at_infection]);
			};
		}
		break;
	case TREATED:
		{
			tEventTime = InvWeibull(draw, MTreatedMortShape, MTreatedMortScale, 1);
		}
		break;
	default:
		{
			tEventTime = DefaultTimeToDeath;
		}
		break;
	};
	tEventTime = WAIT(tEventTime);
	return tEventTime;
};

void Mother::MortalityEvent()
{
	alive = FALSE;
	disease_status = DEAD;
	disease_status_detailed = DEAD_;
	int nIndex = {-1};
	Child *prChild = {NULL};
	while (prChild = mlChild->GetNext(nIndex+1, &nIndex))
	{
		prChild->Mother_Die();
	}
	Finish();
};
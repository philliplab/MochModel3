//LABEL(MMortality, EN) Mortality functions for Mothers

/* NOTE(MMortality, EN)
	This module contains all the mortality functions for the mothers. There
	are three different types of mortality implemented:

	- Mortality for Healthy Mothers
	- Mortality for Infected Mothers
	- Mortality for Treated Mothers

	Mortality for Healthy Mothers

	- Data requirements

    The q[x,y] values (probability of dying between ages x and x+1 given that you
	survived until age x in the year y) by gender and time (model year).

	- Implementation Details

	Using the mortality data, a survival curve S(a) is constructed for each mother.
	Since death from the healthy state is only scheduled at the birth of the
	mother, and all the mothers are assumed to be born simultaneously, all
	mothers have exactly the same survival curve.

	The curve is constructed by setting the survival probability equal to 1
	at age 0. The value of the survival curve at age 1 is then set to
	S(1) = S(0) * (1 - q[0,0]). A straight line was then used to connect
	S(0) to S(1). This process was continued until the value of the
	survival curve reached 0. 

	Note that the mortality data only covers a 40 year time period. It is assumed
	that mortality for all times after 40 years is the same as the mortality at time 40 years.
	For example, S(42) = S(41) * (1 - q[41, 40]) and
	S(50) = S(49) * (1 - q[49, 40]).
	
	To assign a time of death using this curve, the following is done:
	A random uniform number is drawn for a mother. This random number is
	placed on the y axis of the survival curve and the age of death
	is read off from the x-axis.

	The actual implementation is a slight optimization of the above process.
	The random uniform number is draw first and the curve is then constructed
	until the value of the curve reaches the randomly drawn number.

	Mortality for Infected Mothers

	TODO - detailed documentation (1 - Weibull CDF)

    Mortality for Treated Mothers

	TODO - detailed documentation (1 - Weibull CDF)	
	*/

range MORT_LIFE //EN Mortality Life Range
{
	0,91
};

/* NOTE(MORT_LIFE, EN)
    The range of ages that the mortality data spans.
	This conforms to the data specifications of the
	2008 ASSA model.
*/

range MORT_TIME //EN ASSA model Time Range
{
	0,40
};

/* NOTE(MORT_TIME, EN)
    The time range for the mortality and incidence source data.
	The original source for this data is the
	2008 ASSA model's black population. This model was
	designed for a time span of 40 years.
*/

parameters
{
	double MInfectedMortShape;
	double MInfectedMortScale;
	double MInfectedMortPhi[VAN_DER_PAAL_INDX];

	double MSymptomsMortShape;
	double MSymptomsMortScale;

	double MTreatedMortShape;
	double MTreatedMortScale;

	double MIMort_SMort_Corr;

	double HIVFreeMortality[GENDER][MORT_LIFE][MORT_TIME]; //EN HIV-Free Mortality
};

/* NOTE (HIVFreeMortality, EN)
	The q[x,y] values (probability of dying between ages x and x+1 given that you
	survived until age x in the year y) for the population being modelled by gender 
	and time (model year).
*/

parameter_group MotherMortality
{ //EN Mothers' Mortality Parameters
	MInfectedMortShape, MInfectedMortScale, MInfectedMortPhi, MSymptomsMortShape, 
	MSymptomsMortScale, MTreatedMortShape, MTreatedMortScale, MIMort_SMort_Corr
};

actor Mother            //EN Individual
{
	event timeMortalityEvent, MortalityEvent;	//EN Mortality event
};

double InvWeibull(double y, double kappa, double lambda, double phi)
{
	// Lambda is Scale and Kappa is Shape
	double x = 0;
	if (phi == 1000){ // SIGH - this is not a pretty hack - no construct like R's Inf in C++?
		x = pow(10, 10);
	} else
	{
		x = (phi * lambda) * pow(-log(y), 1/kappa);
	};
	return(x);
};

double LifeTableDraw(double x)
{
	int indx = -1;
	double prev_lx = 1;
	double lx = 1;
	int time_indx = 0;
	while (x <= lx)
	{
		indx++;
		time_indx = indx > 40 ? 40 : indx;
		prev_lx = lx;
		lx = prev_lx * (1-HIVFreeMortality[F][indx][time_indx]);
	};
	if (indx == -1){
		indx = 0;
	}; // Small correction for when mother dies between ages 0 and 1.
	return(indx + ((x - lx) / (prev_lx - lx)));
};

TIME Mother::timeMortalityEvent()
{
	TIME tEventTime = TIME_INFINITE;
	double draw = RandUniform(7);

	switch(disease_status)
	{
	case HEALTHY:
		{
			tEventTime = LifeTableDraw(draw);
		}
		break;
	case INFECTED:
		{
			if (showing_symptoms == TRUE)
			{
				// get prev time
				// return the prev time again
				// see what happens if return null
				double symp_mort_par = (1 - MIMort_SMort_Corr) * draw + MIMort_SMort_Corr * inf_mortality_draw;
				tEventTime = InvWeibull(symp_mort_par, MSymptomsMortShape, MSymptomsMortScale, MInfectedMortPhi[vdp_age_at_symptoms]);
			} else
			{
				tEventTime = InvWeibull(inf_mortality_draw, MInfectedMortShape, MInfectedMortScale, MInfectedMortPhi[vdp_age_at_infection]);
			};
		}
		break;
	case TREATED:
		{
			tEventTime = InvWeibull(draw, MTreatedMortShape, MTreatedMortScale, 1);
		}
		break;
	};
	tEventTime = WAIT(tEventTime);
	return tEventTime;
};

void Mother::MortalityEvent()
{
	alive = FALSE;
	disease_status = DEAD;
	disease_status_detailed = DEAD_;
	int nIndex = {-1};
	Child *prChild = {NULL};
	while (prChild = mlChild->GetNext(nIndex+1, &nIndex))
	{
		prChild->Mother_Die();
	}
	Finish();
};
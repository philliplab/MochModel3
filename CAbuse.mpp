parameters
{
	double AbuseRates[GENDER][SOCIO_ECONOMIC_STATE][DISEASE_STATE_DETAILED][DEPRESSION_YEARS];
};

actor Child
{
	logical abused = {FALSE};
	event timeAbuseEvent, AbuseEvent;
};

double abuseTime(DEPRESSION_YEARS curr_age, GENDER gender_internal, DISEASE_STATE_DETAILED mother_disease_status_detailed_fm_internal)
{
	double x = RandUniform(4);
	int indx = -1;
	double notAbuseProb = 1;
	double prevnotAbuseProb = 1;
	double abuse_time = pow(10,10);
	int depression_age_indx = curr_age - 12;
	if (depression_age_indx < 0) {depression_age_indx = 0;};
	if (depression_age_indx > 6) {depression_age_indx = 6;};
	while (x <= notAbuseProb && depression_age_indx + indx < 6)
	{
		indx++;
		prevnotAbuseProb = notAbuseProb;
		notAbuseProb = notAbuseProb * (1 - AbuseRates[gender_internal][SocioEconomicStatus][mother_disease_status_detailed_fm_internal][depression_age_indx + indx]);
	};
	if (x > notAbuseProb)
	{
		abuse_time = indx + ((x - notAbuseProb) / (prevnotAbuseProb - notAbuseProb));
	};
	return(abuse_time);
};

TIME Child::timeAbuseEvent()
{
	TIME tEventTime = TIME_INFINITE;
	if (depression_age == TRUE){
		tEventTime = abuseTime(integer_age, gender, mother_disease_status_detailed_fm);
	}
	tEventTime = WAIT(tEventTime);
	return(tEventTime);
};

void Child::AbuseEvent()
{
	abused = TRUE;
};
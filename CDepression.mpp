range DEPRESSION_YEARS
{
	12, 18
};

parameters
{
	double AbusedDepressionRates[GENDER][SOCIO_ECONOMIC_STATE][DISEASE_STATE_DETAILED][DEPRESSION_YEARS];
	double NotAbusedDepressionRates[GENDER][SOCIO_ECONOMIC_STATE][DISEASE_STATE_DETAILED][DEPRESSION_YEARS];
};

parameter_group ChildAbuseDepression
{ //EN Child's Abuse Parameters
	AbuseRates, AbusedDepressionRates, NotAbusedDepressionRates
};

actor Child
{
	TIME wait_till_depression_age = {12};
	logical depression_age = {FALSE};
	logical depressed = {FALSE};
	event timeDepressionAgeEvent, DepressionAgeEvent;
	event timeDepressionEvent, DepressionEvent;
};

double Child::timeDepressionAgeEvent()
{
	TIME tEventTime = TIME_INFINITE;
	if (ChildModelType == RISK_FACTORS)
	{
		tEventTime = WAIT(wait_till_depression_age);
	};
	return(tEventTime);
};

void Child::DepressionAgeEvent()
{
	depression_age = ((age >= 12) && (age < 19)) ? TRUE : FALSE;
	if (age < 19)
	{
		wait_till_depression_age = 7;
	} else {
		wait_till_depression_age = TIME_INFINITE;
	};
};

double depressionTime(DEPRESSION_YEARS curr_age, GENDER gender_internal, DISEASE_STATE_DETAILED mother_disease_status_detailed_fm_internal, logical abused_internal)
{
	double x = RandUniform(8);
	int indx = -1;
	double notDeproProb = 1;
	double prevnotDeproProb = 1;
	double depro_time = pow(10,10);
	int depression_age_indx = curr_age - 12;
	if (depression_age_indx < 0) {depression_age_indx = 0;};
	if (depression_age_indx > 6) {depression_age_indx = 6;};
	while (x <= notDeproProb && depression_age_indx + indx < 6)
	{
		indx++;
		prevnotDeproProb = notDeproProb;
		double depro_rate;
		if (abused_internal == TRUE){
			depro_rate = AbusedDepressionRates[gender_internal][SocioEconomicStatus][mother_disease_status_detailed_fm_internal][depression_age_indx + indx];
		} else {
			depro_rate = NotAbusedDepressionRates[gender_internal][SocioEconomicStatus][mother_disease_status_detailed_fm_internal][depression_age_indx + indx];
		};
		notDeproProb = notDeproProb * (1 - depro_rate);
	};
	if (x > notDeproProb)
	{
		depro_time = indx + ((x - notDeproProb) / (prevnotDeproProb - notDeproProb));
	};
	return(depro_time);
};

TIME Child::timeDepressionEvent()
{
	TIME tEventTime = TIME_INFINITE;
	if (depression_age == TRUE){
		tEventTime = depressionTime(integer_age, gender, mother_disease_status_detailed_fm, abused);
	}
	tEventTime = WAIT(tEventTime);
	return(tEventTime);
};

void Child::DepressionEvent()
{
	depressed = TRUE;
};
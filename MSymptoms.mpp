parameters
{
	double MSymptomsShape;
	double MSymptomsScale;
	double MIMort_Symp_Corr;
};

parameter_group MotherSymptoms
{ //EN Mothers' Symptom Parameters
	MSymptomsShape, MSymptomsScale, MIMort_Symp_Corr
};

actor Mother            //EN Individual
{
	event timeSymptomEvent, SymptomEvent;
};

double InvWeibull2(double y, double kappa, double lambda, double phi)
{
	// Lambda is Scale and Kappa is Shape
	double x = 0;
	if (phi == 1000){ // SIGH - this is not a pretty hack - no construct like R's Inf in C++?
		x = pow(10, 10);
	} else
	{
		x = (phi * lambda) * pow(-log(y), 1/kappa);
	};
	return(x);
};

TIME Mother::timeSymptomEvent()
{
	TIME tEventTime = TIME_INFINITE;
	if (disease_status == INFECTED && showing_symptoms == FALSE){
		double symp_draw = RandUniform(6);
		double symp_par;
		symp_par = ((1 - MIMort_Symp_Corr) * symp_draw) + (MIMort_Symp_Corr * inf_mortality_draw);
		tEventTime = InvWeibull2(symp_par, MSymptomsShape, MSymptomsScale, MInfectedMortPhi[vdp_age_at_infection]);
	}
	tEventTime = WAIT(tEventTime);
	return tEventTime;
};

void Mother::SymptomEvent()
{
	showing_symptoms = TRUE;
	diagnosed = TRUE;
	vdp_age_at_symptoms = vdp_age_int;
	int nIndex = {-1};
	Child *prChild = {NULL};
	while (prChild = mlChild->GetNext(nIndex+1, &nIndex))
	{
		prChild->Mother_Symptoms();
	}
};
//LABEL(MSymptoms, EN) Determines when a mother will start showing symptoms

/* NOTE(MSymptoms, EN)
	This module schedules and implements the event that transitions a mother
	from the infected or diagnosed states into the symptoms state. It is
	implemented in a similar fashion to the mortality from the infected
	state for mothers.

	- Data requirements

	The shape and scale parameters for the curve depicting the probability
	of not showing symptoms by time since infection. For each age group, the
	scale parameter is multiplied by a factor. This shifts the curve to the
	right for younger mothers and to the left for older mothers. Lastly,
	a parameter that captures the correlation between time to death since
	infection and the time to symptoms since infection.

	- Implementation details

    The function depicting the probability
	of not showing symptoms by time since infection is of the form: 
	S(t) = (lambda) * pow(-log(t), 1/kappa) where
	lambda is the scale parameter and kappa is the shape parameter 
	and t is the time since infection.
	Note that this is just 1 - the CDF of a weibull distribution.

	Furthermore, to accomodate different age groups, the lamba parameter is multiplied by a factor 
	called phi. Each of the different age groups used in the Van der Paal article must be given
	a phi value.

	To assign a time of symptoms using this curve, the following is done:
	A random uniform number is drawn for a mother. This random number is
	placed on the y axis of the survival curve and the age of death
	is read off from the x-axis.

	Lastly, to account for the correlation between time to death since
	infection and the time to symptoms since infection, the following
	mechanism was build. The random draw used to assign a time of death
	upon infection is stored. When the transition into symptoms is scheduled,
	a new random uniform number is drawn. These two random numbers are combined
	into a new random number using the formula ((1 - MIMort_Symp_Corr) * symp_draw) + (MIMort_Symp_Corr * inf_mortality_draw).

	A special note about the use of the phi factor. The Van der Paal article only provides survival
	estimates for ages > 13. To ease the implementation, the first entry of the phi parameter corresponds
	to ages smaller than or equal to 13. This value must always be 1000. This is a special marker
	that will instruct the function to not assign a death date to people younger than 13.
	Future versions of the model will include a better implemenation of this mechanism.
*/

parameters
{
	double MSymptomsShape; //EN Infected Mother Time to Symptoms Curve Shape - kappa
	double MSymptomsScale; //EN Infected Mother Time to Symptoms Curve Scale - lambda
	double MIMort_Symp_Corr; //EN Correlation between mortality and becoming symptomatic
};

/* NOTE (MSymptomsShape, EN)
    The shape parameter for the Infected mother's time-to-symptoms curve
*/

/* NOTE (MSymptomsScale, EN)
   The scale parameter for the Infected mother's time-to-symptoms curve
*/

/* NOTE (MIMort_Symp_Corr, EN)
   The the correlation between time to death since
	infection and the time to symptoms since infection
*/

parameter_group MotherSymptoms
{ //EN Mothers' Symptom Parameters
	MSymptomsShape, MSymptomsScale, MIMort_Symp_Corr
};

actor Mother            //EN Individual
{
	event timeSymptomEvent, SymptomEvent;
};

double InvWeibull2(double y, double kappa, double lambda, double phi)
{
	// Lambda is Scale and Kappa is Shape
	double x = 0;
	if (phi == 1000){ // SIGH - this is not a pretty hack - no construct like R's Inf in C++?
		x = pow(10, 10);
	} else
	{
		x = (phi * lambda) * pow(-log(y), 1/kappa);
	};
	return(x);
};

TIME Mother::timeSymptomEvent()
{
	TIME tEventTime = TIME_INFINITE;
	if (disease_status == INFECTED && showing_symptoms == FALSE){
		double symp_draw = RandUniform(6);
		double symp_par;
		symp_par = ((1 - MIMort_Symp_Corr) * symp_draw) + (MIMort_Symp_Corr * inf_mortality_draw);
		tEventTime = InvWeibull2(symp_par, MSymptomsShape, MSymptomsScale, MInfectedMortPhi[vdp_age_at_infection]);
	}
	tEventTime = WAIT(tEventTime);
	return tEventTime;
};

void Mother::SymptomEvent()
{
	disease_status_detailed = SYMPTOMS_;
	showing_symptoms = TRUE;
	diagnosed = TRUE;
	vdp_age_at_symptoms = vdp_age_int;
	int nIndex = {-1};
	Child *prChild = {NULL};
	while (prChild = mlChild->GetNext(nIndex+1, &nIndex))
	{
		prChild->Mother_Symptoms();
	}
};
parameters
{
	double MinSymptomWait;
	double MaxSymptomWait;
	double MSymptomsShape;
	double MSymptomsScale;

	double MIMort_Symp_Corr;
};

parameter_group MotherSymptoms
{ //EN Mothers' Symptom Parameters
	MinSymptomWait, MaxSymptomWait	
};

actor Mother            //EN Individual
{
	logical symptom_time_drawn = {FALSE};
	TIME symp_event_time = {TIME_INFINITE};

	event timeSymptomTimeEvent, SymptomTimeEvent;
	event timeSymptomEvent, SymptomEvent;
};

double InvWeibull2(double y, double kappa, double lambda, double phi)
{
	// Lambda is Scale and Kappa is Shape
	double x = 0;
	if (phi == 1000){ // SIGH - this is not a pretty hack - no construct like R's Inf in C++?
		x = pow(10, 10);
	} else
	{
		x = (phi * lambda) * pow(-log(y), 1/kappa);
	};
	return(x);
};

TIME Mother::timeSymptomTimeEvent()
{
	TIME tEventTime = TIME_INFINITE;
	if (disease_status == INFECTED && symptom_time_drawn == FALSE)
	{
		tEventTime = 0;
	};
	tEventTime = WAIT(tEventTime);
	return tEventTime;
};

void Mother::SymptomTimeEvent()
{
	double draw = RandUniform(6);
	double symp_par;
	symp_par = ((1 - MIMort_Symp_Corr) * draw) + (MIMort_Symp_Corr * inf_mortality_draw);

	if (disease_status == INFECTED)
	{
		symp_event_time = InvWeibull2(symp_par, MSymptomsShape, MSymptomsScale, MInfectedMortPhi[vdp_age_at_infection]);
	};
	symptom_time_drawn = TRUE;
};

TIME Mother::timeSymptomEvent()
{
	TIME tEventTime = TIME_INFINITE;
	if (symptom_time_drawn == TRUE && disease_status == INFECTED){
		tEventTime = symp_event_time;
	}
	tEventTime = WAIT(tEventTime);
	return tEventTime;
};

void Mother::SymptomEvent()
{
	disease_status = SYMPTOMS;
	vdp_age_at_symptoms = vdp_age_int;
	int nIndex = {-1};
	Child *prChild = {NULL};
	while (prChild = mlChild->GetNext(nIndex+1, &nIndex))
	{
		prChild->Mother_Symptoms();
	}
};
link Child.lMother Mother.mlChild[];

parameters 
{
	double FertilityRates[LIFE];
};

parameter_group MotherFertility
{ //EN Mothers' Mortality Parameters
	FertilityRates
};

actor Mother            //EN Individual
{
	LIFE number_children = {0};
	logical birth_scheduled = {FALSE};
	TIME wait_till_next_birth = {TIME_INFINITE};

	event timeFirstBirthSchedEvent, FirstBirthSchedEvent;
	event timeBirthEvent, BirthEvent;
};

TIME Mother::timeFirstBirthSchedEvent()
{
	TIME tEventTime = TIME_INFINITE;
	if (birth_scheduled == FALSE)
	{
		tEventTime = 15;
	}
	tEventTime = WAIT(tEventTime);
	return(tEventTime);
};

double next_birth_time(int curr_age)
{
	double x = RandUniform(12);
	double not_birth_prob = 1;
	double wait_time = pow(10, 10);
	int indx = 1;
	while ((curr_age + indx <= 51) && not_birth_prob > x)
	{
		not_birth_prob = not_birth_prob * (1-FertilityRates[curr_age + indx]);
		indx++;
	}
	if (not_birth_prob <= x){
	    wait_time = indx + RandUniform(13);
	};
	return(wait_time);
};

void Mother::FirstBirthSchedEvent()
{
	birth_scheduled = TRUE;
	wait_till_next_birth = next_birth_time(integer_age+1);
}

TIME Mother::timeBirthEvent()
{
	TIME tEventTime = TIME_INFINITE;
	if (birth_scheduled == TRUE){
		tEventTime = wait_till_next_birth;
	}
	tEventTime = WAIT(tEventTime);
	return tEventTime;
};

void Mother::BirthEvent()
{
	number_children++;

	wait_till_next_birth = next_birth_time(integer_age);

	Child *prChild = new Child();
	mlChild->Add(prChild);
	prChild->Start();
	if (disease_status == INFECTED){
		prChild->Mother_Infect();
	}
};
link Child.lMother Mother.mlChild[];

parameters 
{
	double MinBirthWait;
	double MaxBirthWait;
	int MaxChildren;
	double FertilityRates[LIFE];
};

partition TIME_PART
{
	0,10,20,30,40,50,60,70,100
};

actor Mother            //EN Individual
{
	LIFE number_children = {0};
	LIFE number_children_link = count(mlChild);

	event timeBirthEvent, BirthEvent;
};

TIME Mother::timeBirthEvent()
{
	TIME tEventTime = TIME_INFINITE;
	double curr_fertility = FertilityRates[integer_age];
	if (curr_fertility >= 1){
		tEventTime = 0;
	} else if (curr_fertility > 0)
	{
		tEventTime = -log(RandUniform(4)) / -log(1 - curr_fertility);
	};
	tEventTime = WAIT(tEventTime);
	return tEventTime;
};

void Mother::BirthEvent()
{
	number_children++;
	Child *prChild = new Child();
	mlChild->Add(prChild);
	prChild->Start();
	if (infected == TRUE){
		prChild->Mother_Infect();
	}
};

table Mother ageAtBirth
{
	self_scheduling_split(age, INFECTION_AGES)+
	*
	{
		changes(number_children)
	}
};


table Mother FertDetails
[alive == FALSE]
{
	number_children+
	*
	{
		unit
	}	//EN Demographic characteristics
};

table Mother FertDetailsLink
{
	{
		value_at_entrances(alive, FALSE, number_children_link)
	}	//EN Demographic characteristics
};

table Mother FertDetailsSum
{
	{
		value_at_entrances(alive, FALSE, number_children)
	}	//EN Demographic characteristics
};
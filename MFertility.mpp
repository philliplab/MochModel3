//LABEL(MFertility, EN) Schedules and implements births

/* NOTE(MFertility, EN)
	This module schedules and implements births. A mother can give
	birth at any age, where the provided fertility rates are greater
	than zero, and from any of the disease states other than the death state.

	- Data requirements

	Three parameters must be specified: 
	- A vector of fertility rates must be provided specifying the fertility at each age between 0 and 100. 
	- A vector providing numbers that the fertility rates are multiplied with for each disease state must also be provided.
	- A vector providing numbers that the fertility rates are multiplied with for the number of children the mother already has.

	- Implementation Details

	Fertility is implemented in two different events. First a mother must become fertile and then the
	mother can have a child. After having a child, a mother becomes infertile for 1 year. However, 
	the mother can give birth immediately upon becoming fertile. This implies that the gestation
	period is included in the 1 year of 'infertility' immediately after giving birth.

	Upon becoming fertile, a birth event is scheduled. A curve, S(t), depicting the probability of not
	giving birth is constructed for the subject. The curve is constructed by setting the 
	probability of not giving birth equal to 1 at the moment of becoming fertile. The value of 
	the curve  one year later is then set to S(1) = S(0) * (1 - fert[age + 1] * parity_multiplier * disease_state_multiplier)
	where fert is the vector of fertility rates for mothers, age is the age at which the mother
	became fertile, the parity multiplier and diease_state_multipliers are factors that
	adjusts a mothers fertility based on the number of children she already have and her
	disease status. A straight line is then used to connect
	S(0) to S(1). Similarly S(2) = S(1) * (1 - fert[age + 2] * parity_multiplier * disease_state_multiplier).
	Again a straight line is used to connect S(1) to S(2). This process is continued until the value of the
	survival curve reached 0. 
	
	To assign a time of the next birth using this curve, the following is done:
	A random uniform number is drawn for a mother. This random number is
	placed on the y axis of the curve and the age of the next birth is read off from the x-axis.

	Upon giving birth, a child actor is creator and initialized. A link is created
	between the mother and child. The mother is made infertile and 'become fertile' event is
	scheduled for one year later.
*/

link Child.lMother Mother.mlChild[];

range PARITY
{
	0,15
};
/* NOTE (PARITY, EN)
    The range of valid parity values for a mother.
	It is assumed that no mother can have more than 15 children.
*/

parameters 
{
	double FertilityRates[LIFE]; //EN Fertility Rates
	double DiseaseFertMultipliers[DISEASE_STATE_DETAILED]; //EN Fertility Multipliers based on Disease State of Mother
	double ParityFertMultipliers[PARITY]; //EN Fertility Multipliers based on Parity of Mother
};

/* NOTE (FertilityRates, EN)
    The probability of having a child at each age.
*/

/* NOTE (DiseaseFertMultipliers, EN)
    The fertility rates of mothers are multiplied by these factors to account
	for the effect of the mother's disease state on her fertility. Note that
	these rates are based on DISEASE_STATE and not DISEASE_STATE_DETAILED
*/

/* NOTE (ParityFertMultipliers, EN)
    The fertility rates of mothers are multiplied by these factors to account
	for the effect of the mother's parity on her fertility
*/

parameter_group MotherFertility
{ //EN Mothers' Mortality Parameters
	FertilityRates, DiseaseFertMultipliers, ParityFertMultipliers
};

actor Mother            //EN Individual
{
	PARITY number_children = {0};
	logical fertile = {FALSE};
	TIME time_to_next_birth_scheduling = {0};
	TIME time_to_next_birth = {0};

	event timeBirthSchedEvent, BirthSchedEvent;
	event timeBirthEvent, BirthEvent;
};

TIME Mother::timeBirthSchedEvent()
{
	TIME tEventTime = TIME_INFINITE;
	if (fertile == FALSE)
	{
		tEventTime = time_to_next_birth_scheduling;
	};
	tEventTime = WAIT(tEventTime);
	return(tEventTime);
};

double next_birth_time(int curr_age, DISEASE_STATE_DETAILED curr_disease_status, double prev_birth_time_of_year, PARITY number_children_internal)
{
	double x = RandUniform(12);
	double not_birth_prob = 1;
	double prev_not_birth_prob = 1;
	double wait_time = pow(10, 10);
	int indx = -1;
	if (prev_birth_time_of_year > 0.5)
	{
		curr_age++;
	};
	while ((curr_age + indx <= 50) && not_birth_prob > x)
	{
		indx++;
		prev_not_birth_prob = not_birth_prob;
		double curr_fert = FertilityRates[curr_age + indx]*DiseaseFertMultipliers[curr_disease_status]*ParityFertMultipliers[number_children_internal];
		if (curr_fert > 1){ curr_fert = 1; };
		if (curr_fert < 0){ curr_fert = 0; };
		not_birth_prob = not_birth_prob * (1-curr_fert);
	}
	if (not_birth_prob <= x){
		x = x - not_birth_prob;
		double interpolation_step_size = x / (prev_not_birth_prob - not_birth_prob);
	    wait_time = indx + interpolation_step_size;
	};
	wait_time = wait_time + prev_birth_time_of_year;
	return(wait_time);
};

void Mother::BirthSchedEvent()
{
	fertile = TRUE;
	time_to_next_birth = next_birth_time(integer_age, disease_status, age - integer_age, number_children);
}

TIME Mother::timeBirthEvent()
{
	TIME tEventTime = TIME_INFINITE;
	if (fertile == TRUE){
		tEventTime = time_to_next_birth;
	}
	tEventTime = WAIT(tEventTime);
	return tEventTime;
};

void Mother::BirthEvent()
{
	number_children++;

	fertile = FALSE;
	time_to_next_birth_scheduling = 1;

	Child *prChild = new Child();
	mlChild->Add(prChild);
	prChild->Start();
	prChild->Set_Mother_Age_And_SES(age, ses);
	if (disease_status == INFECTED){
		prChild->Mother_Infect();
	}
};
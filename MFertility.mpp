link Child.lMother Mother.mlChild[];

parameters 
{
	double FertilityRates[LIFE];
	double DiseaseFertMultipliers[DISEASE_STATE];
};

parameter_group MotherFertility
{ //EN Mothers' Mortality Parameters
	FertilityRates, DiseaseFertMultipliers
};

actor Mother            //EN Individual
{
	LIFE number_children = {0};
	logical fertile = {FALSE};
	TIME time_to_next_scheduling_event = {15};
	TIME wait_till_next_birth = {0};

	event timeBirthSchedEvent, BirthSchedEvent;
	event timeBirthEvent, BirthEvent;
};

TIME Mother::timeBirthSchedEvent()
{
	TIME tEventTime = TIME_INFINITE;
	if (fertile == FALSE)
	{
		tEventTime = time_to_next_scheduling_event;
	};
	tEventTime = WAIT(tEventTime);
	return(tEventTime);
};

double next_birth_time(int curr_age, DISEASE_STATE curr_disease_status, double prev_birth_time_of_year)
{
	double x = RandUniform(12);
	double not_birth_prob = 1;
	double prev_not_birth_prob = 1;
	double wait_time = pow(10, 10);
	int indx = -1;
	if (prev_birth_time_of_year > 0.5)
	{
		curr_age++;
	};
	while ((curr_age + indx <= 50) && not_birth_prob > x)
	{
		indx++;
		prev_not_birth_prob = not_birth_prob;
		not_birth_prob = not_birth_prob * (1-FertilityRates[curr_age + indx]*DiseaseFertMultipliers[curr_disease_status]);
	}
	if (not_birth_prob <= x){
		x = x - not_birth_prob;
		double interpolation_step_size = x / (prev_not_birth_prob - not_birth_prob);
	    wait_time = indx + interpolation_step_size;
	};
	wait_time = wait_time + prev_birth_time_of_year;
	return(wait_time);
};

void Mother::BirthSchedEvent()
{
	fertile = TRUE;
	wait_till_next_birth = next_birth_time(integer_age, disease_status, age - integer_age);
}

TIME Mother::timeBirthEvent()
{
	TIME tEventTime = TIME_INFINITE;
	if (fertile == TRUE){
		tEventTime = wait_till_next_birth;
	}
	tEventTime = WAIT(tEventTime);
	return tEventTime;
};

void Mother::BirthEvent()
{
	number_children++;

	fertile = FALSE;
	time_to_next_scheduling_event = 1;

	Child *prChild = new Child();
	mlChild->Add(prChild);
	prChild->Start();
	if (disease_status == INFECTED){
		prChild->Mother_Infect();
	}
};
namespace mm {


// one-word synonyms for unsigned integral types
typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;

// TIME definition
typedef double TIME;

// real definition
typedef float real;

// counter definition
typedef ushort counter;

// integer definition
typedef short integer;

// index definition
typedef ulong index;

// logical definition
typedef uint logical;

// time constants
CONSTANT( TIME, ANY_AGE, (TIME) -1 );
CONSTANT( TIME, TIME_UNDEF, (TIME) -1 );
CONSTANT( TIME, TIME_INFINITE, (TIME) SHRT_MAX );

extern Thread EventQueue *gpoEventQueue;

void SetCaseWeight( double dCaseWeight, double dCaseSubsampleWeight = UNUSED_VALUE );

// classifications

// ranges
typedef uint REPORT_TIME;
CONSTANT( int, r_min_REPORT_TIME, 0 );
CONSTANT( int, r_max_REPORT_TIME, 200 );
CONSTANT( int, rc_size_REPORT_TIME, 201 );

// partitions

class Parameters {
	public:
		Parameters();

		double	MortalityHazard;
		int	StartingPopulationSize;
};

extern Parameters	*gprParam;


class Mother;
class Ticker;


class MotherTable {
	public:
		MotherTable() { };

		// begin MembersDump
		//   group=<unknown token type>
		//   group=double
		double	tab0events;
		//   group=float
		real	tab0open0;
		real	tab0close0;
		real	tab0open1;
		real	tab0close1;
		real	tab0open2;
		real	tab0close2;
		real	tab0open3;
		real	tab0close3;
		//   group=long
		//   group=ulong
		index	tab0cell;
		index	tab0total_cell;
		//   group=int
		//   group=uint
		logical	tab0dim_filter : 1;
		//   group=short
		//   group=ushort
		//   group=char
		//   group=uchar
		// end MembersDump

};

class Mother : public ActorClass {
	public:
		TIME	__time;
		double	__events;
		class MotherStateFunctions	*poStateFunctions;
		class MotherDerivedStates	*poDerivedStates;
		class MotherTable	tableinfo;
		void *operator new( size_t count );

		// links to other actors

		// user-supplied data members

		// user-supplied and required functions
		Mother() { };
		void Finish ( ) ; 
		void Start ( ) ; 

		// special functions generated by the pre-compiler
		Mother( BOOL bInit ) { InitActor(); };
		~Mother() { DeleteActor(); };
		void	InitActor();
		void	DeleteActor();
		void	InitializeStates();
		void	UpdateLinkedStates();
		void	StartSpecial1();
		void	StartSpecial2();
		void	FinishSpecial();
		void	WaitUntil( double target_time );
		Mother	*UpdateTime( );
		void	WaitUntilThisActor(double target_time);
		void	WaitSpecial( TIME wait_time );

		// actor set nodes
		ActorSetNode	*poasAllMother;

		// event functions and variables
		void __fastcall	MortalityEvent();
		TIME __fastcall	timeMortalityEvent();
		Event	*poMortalityEvent;

		// event processing functions
		double	EventTime( int nEventNum, int *pnEventInfo );
		void	Implement( int nEventNum, int nEventInfo );

		// state variables and their special functions
		long	Get_actor_id() { return actor_id; };
		double	Set_actor_subsample_weight( double value );
		double	Set_actor_weight( double value );

		// begin MembersDump
		//   group=<unknown token type>
		//   group=double
		double	actor_subsample_weight;
		double	actor_weight;
		TIME	age;
		double	case_seed;
		TIME	time;
		TIME	duration__max_value_out;
		TIME	duration__min_value_out;
		//   group=float
		//   group=long
		long	actor_id;
		long	case_id;
		//   group=ulong
		//   group=int
		//   group=uint
		logical	alive : 1;
		REPORT_TIME	report_time : 8;
		logical	actorset_filter_asAllMother : 1;
		logical	alive_value_in : 1;
		logical	table_filter_DurationOfLife : 1;
		logical	__finished : 1;
		//   group=short
		//   group=ushort
		//   group=char
		//   group=uchar
		// end MembersDump

};

class MotherStateFunctions {
	public:
		MotherStateFunctions() { };
		class Mother	*poParent;
		class MotherDerivedStates	*poDerivedStates;

		// state special functions
		double	Set_actor_subsample_weight( double value ){ return poParent->actor_subsample_weight = value; };
		double	Set_actor_weight( double value ){ return poParent->actor_weight = value; };
		TIME	Set_age( TIME value, bool bStartFunction = false ){ return poParent->age = value; };
		logical	Set_alive( logical value );
		REPORT_TIME	Set_report_time( REPORT_TIME value );
		TIME	Set_time( TIME value, bool bStartFunction = false ){ return poParent->time = value; };
		logical	Set_actorset_filter_asAllMother( logical value );
		logical	Set_alive_value_in( logical value );
		TIME	Set_duration__max_value_out( TIME value );
		TIME	Get_duration__max_value_out();
		TIME	Set_duration__min_value_out( TIME value );
		TIME	Get_duration__min_value_out();
		logical	Set_table_filter_DurationOfLife( logical value );
};

class MotherDerivedStates {
	public:
		MotherDerivedStates() { };
		class Mother	*poParent;
		class MotherStateFunctions	*poStateFunctions;

		// derived state variables and their special functions
		TIME	Set_duration_( TIME value );
		TIME	Get_duration_() { return duration_ + poParent->__time - duration__time; };

		// begin MembersDump
		//   group=<unknown token type>
		//   group=double
		TIME	duration_;
		TIME	duration__time;
		//   group=float
		//   group=long
		//   group=ulong
		//   group=int
		//   group=uint
		//   group=short
		//   group=ushort
		//   group=char
		//   group=uchar
		// end MembersDump

};

class Ticker : public ActorClass {
	public:
		TIME	__time;
		double	__events;
		class TickerStateFunctions	*poStateFunctions;
		class TickerDerivedStates	*poDerivedStates;
		void *operator new( size_t count );

		// links to other actors

		// user-supplied data members

		// user-supplied and required functions
		Ticker() { };
		void Finish ( ) ; 
		void Start ( ) ; 

		// special functions generated by the pre-compiler
		Ticker( BOOL bInit ) { InitActor(); };
		~Ticker() { DeleteActor(); };
		void	InitActor();
		void	DeleteActor();
		void	InitializeStates();
		void	UpdateLinkedStates();
		void	StartSpecial1();
		void	StartSpecial2();
		void	FinishSpecial();
		void	WaitUntil( double target_time );
		Ticker	*UpdateTime( );
		void	WaitUntilThisActor(double target_time);
		void	WaitSpecial( TIME wait_time );

		// event functions and variables
		void __fastcall	TickEvent();
		TIME __fastcall	timeTickEvent();
		Event	*poTickEvent;

		// event processing functions
		double	EventTime( int nEventNum, int *pnEventInfo );
		void	Implement( int nEventNum, int nEventInfo );

		// state variables and their special functions
		long	Get_actor_id() { return actor_id; };
		double	Set_actor_subsample_weight( double value );
		double	Set_actor_weight( double value );

		// begin MembersDump
		//   group=<unknown token type>
		//   group=double
		double	actor_subsample_weight;
		double	actor_weight;
		TIME	age;
		double	case_seed;
		TIME	next_tick;
		TIME	time;
		//   group=float
		//   group=long
		long	actor_id;
		long	case_id;
		//   group=ulong
		//   group=int
		//   group=uint
		REPORT_TIME	report_time : 8;
		logical	__finished : 1;
		//   group=short
		//   group=ushort
		//   group=char
		//   group=uchar
		// end MembersDump

};

class TickerStateFunctions {
	public:
		TickerStateFunctions() { };
		class Ticker	*poParent;
		class TickerDerivedStates	*poDerivedStates;

		// state special functions
		double	Set_actor_subsample_weight( double value ){ return poParent->actor_subsample_weight = value; };
		double	Set_actor_weight( double value ){ return poParent->actor_weight = value; };
		TIME	Set_age( TIME value, bool bStartFunction = false ){ return poParent->age = value; };
		TIME	Set_next_tick( TIME value );
		REPORT_TIME	Set_report_time( REPORT_TIME value );
		TIME	Set_time( TIME value, bool bStartFunction = false ){ return poParent->time = value; };
};

class TickerDerivedStates {
	public:
		TickerDerivedStates() { };
		class Ticker	*poParent;
		class TickerStateFunctions	*poStateFunctions;

		// derived state variables and their special functions

		// begin MembersDump
		//   group=<unknown token type>
		//   group=double
		//   group=float
		//   group=long
		//   group=ulong
		//   group=int
		//   group=uint
		//   group=short
		//   group=ushort
		//   group=char
		//   group=uchar
		// end MembersDump

};

// global actor declarations
extern Thread Mother	*gpoEmptyMother;
typedef CTypedPtrArray<CObArray, Mother*> MotherArray;
void	DeleteAllMotherActors();
extern Thread Ticker	*gpoEmptyTicker;
typedef CTypedPtrArray<CObArray, Ticker*> TickerArray;
void	DeleteAllTickerActors();

class asAllMotherActorSetTree : public ActorSetTree	{
	public:
		asAllMotherActorSetTree() {m_nId = 0;};
		~asAllMotherActorSetTree() {};
		Mother	* Item(int nIndex) {return (Mother *) ActorSetTree::Item(nIndex);};
		Mother	* GetRandom(double dRandom) {return (Mother *) ActorSetTree::GetRandom(dRandom);};
		int	ActorCompare(ActorClass *poActor1, ActorClass *poActor2);

	private:
		ActorSetNode *RemoveAll() {return ActorSetTree::RemoveAll();}
};
extern Thread asAllMotherActorSetTree	*asAllMother;


} // namespace 

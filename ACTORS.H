namespace mm {


// one-word synonyms for unsigned integral types
typedef unsigned char uchar;
typedef unsigned short ushort;
typedef unsigned int uint;
typedef unsigned long ulong;

// TIME definition
typedef double TIME;

// real definition
typedef float real;

// counter definition
typedef ushort counter;

// integer definition
typedef short integer;

// index definition
typedef ulong index;

// logical definition
typedef uint logical;

// time constants
CONSTANT( TIME, ANY_AGE, (TIME) -1 );
CONSTANT( TIME, TIME_UNDEF, (TIME) -1 );
CONSTANT( TIME, TIME_INFINITE, (TIME) SHRT_MAX );

extern Thread EventQueue *gpoEventQueue;

void SetCaseWeight( double dCaseWeight, double dCaseSubsampleWeight = UNUSED_VALUE );

// classifications
enum DISEASE_STATE {
HEALTHY,
INFECTED,
SYMPTOMS,
TREATED,
DEAD };
CONSTANT( int, rc_size_DISEASE_STATE, 5 );

// ranges
typedef uint INCIDENCE_RATES_SOURCE;
CONSTANT( int, r_min_INCIDENCE_RATES_SOURCE, 0 );
CONSTANT( int, r_max_INCIDENCE_RATES_SOURCE, 2 );
CONSTANT( int, rc_size_INCIDENCE_RATES_SOURCE, 3 );
typedef uint LIFE;
CONSTANT( int, r_min_LIFE, 0 );
CONSTANT( int, r_max_LIFE, 100 );
CONSTANT( int, rc_size_LIFE, 101 );
typedef uint REPORT_TIME;
CONSTANT( int, r_min_REPORT_TIME, 0 );
CONSTANT( int, r_max_REPORT_TIME, 200 );
CONSTANT( int, rc_size_REPORT_TIME, 201 );
typedef uint VAN_DER_PAAL_INDX;
CONSTANT( int, r_min_VAN_DER_PAAL_INDX, 0 );
CONSTANT( int, r_max_VAN_DER_PAAL_INDX, 4 );
CONSTANT( int, rc_size_VAN_DER_PAAL_INDX, 5 );

// partitions
typedef uint INCIDENCE_AGE_GROUPS;
CONSTANT( int, rc_size_INCIDENCE_AGE_GROUPS, 13 );
extern real p_points_INCIDENCE_AGE_GROUPS[];
typedef uint INFECTION_AGES;
CONSTANT( int, rc_size_INFECTION_AGES, 14 );
extern real p_points_INFECTION_AGES[];
typedef uint TIME_PART;
CONSTANT( int, rc_size_TIME_PART, 10 );
extern real p_points_TIME_PART[];
typedef uint VAN_DER_PAAL_AGES;
CONSTANT( int, rc_size_VAN_DER_PAAL_AGES, 5 );
extern real p_points_VAN_DER_PAAL_AGES[];

class Parameters {
	public:
		Parameters();

		double	ChildMortParamMH;
		double	ChildMortParamMI;
		double	FertilityRates
[rc_size_LIFE];
		double	IncidenceRates
[rc_size_INCIDENCE_RATES_SOURCE]
[rc_size_LIFE];
		INCIDENCE_RATES_SOURCE	IncidenceRatesSource;
		double	MaxBirthWait;
		int	MaxChildren;
		double	MaxInfWait;
		double	MaxLife;
		double	MinBirthWait;
		double	MInfectedMortPhi
[rc_size_VAN_DER_PAAL_INDX];
		double	MInfectedMortScale;
		double	MInfectedMortShape;
		double	MinInfWait;
		int	StartingPopulationSize;
};

extern Parameters	*gprParam;


class Child;
class Mother;
class Ticker;


class ChildTable {
	public:
		ChildTable() { };

		// begin MembersDump
		//   group=<unknown token type>
		//   group=double
		double	tab0events;
		double	tab1events;
		double	tab2events;
		double	tab3events;
		double	tab4events;
		double	tab5events;
		//   group=float
		real	tab0open0;
		real	tab0close0;
		real	tab0open1;
		real	tab0close1;
		real	tab0open2;
		real	tab0close2;
		real	tab0open3;
		real	tab0close3;
		real	tab1open0;
		real	tab1close0;
		real	tab1open1;
		real	tab1close1;
		real	tab1open2;
		real	tab1close2;
		real	tab1open3;
		real	tab1close3;
		real	tab2open0;
		real	tab2close0;
		real	tab2open1;
		real	tab2close1;
		real	tab3open0;
		real	tab3close0;
		real	tab4open0;
		real	tab4close0;
		real	tab4open1;
		real	tab4close1;
		real	tab5open0;
		real	tab5close0;
		//   group=long
		//   group=ulong
		index	tab0cell;
		index	tab0total_cell;
		index	tab1cell;
		index	tab1total_cell;
		index	tab2cell;
		index	tab2total_cell;
		index	tab3cell;
		index	tab3total_cell;
		index	tab4cell;
		index	tab4total_cell;
		index	tab5cell;
		index	tab5total_cell;
		//   group=int
		//   group=uint
		logical	tab0dim_filter : 1;
		logical	tab1dim_filter : 1;
		logical	tab2dim_filter : 1;
		logical	tab3dim_filter : 1;
		logical	tab4dim_filter : 1;
		logical	tab5dim_filter : 1;
		//   group=short
		//   group=ushort
		//   group=char
		//   group=uchar
		// end MembersDump

};

class Child : public ActorClass {
	public:
		TIME	__time;
		double	__events;
		class ChildStateFunctions	*poStateFunctions;
		class ChildDerivedStates	*poDerivedStates;
		class ChildTable	tableinfo;
		void *operator new( size_t count );

		// links to other actors
		class Mother	*lMother;
		void	Set_lMother( Mother *value );

		// user-supplied data members

		// user-supplied and required functions
		Child() { };
		void Finish ( ) ; 
		void Mother_Die ( ) ; 
		void Mother_Infect ( ) ; 
		void Start ( ) ; 

		// special functions generated by the pre-compiler
		Child( BOOL bInit ) { InitActor(); };
		~Child() { DeleteActor(); };
		void	InitActor();
		void	DeleteActor();
		void	InitializeStates();
		void	UpdateLinkedStates();
		void	StartSpecial1();
		void	StartSpecial2();
		void	FinishSpecial();
		void	WaitUntil( double target_time );
		Child	*UpdateTime( );
		void	WaitUntilThisActor(double target_time);
		void	WaitSpecial( TIME wait_time );

		// actor set nodes
		ActorSetNode	*poasAllChild;

		// event functions and variables
		void __fastcall	ScheduleEvent();
		TIME __fastcall	timeScheduleEvent();
		Event	*poScheduleEvent;
		TIME schedule_event_time;
		void __fastcall	MortalityEvent();
		TIME __fastcall	timeMortalityEvent();
		Event	*poMortalityEvent;

		// event processing functions
		double	EventTime( int nEventNum, int *pnEventInfo );
		void	Implement( int nEventNum, int nEventInfo );

		// state variables and their special functions
		long	Get_actor_id() { return actor_id; };
		double	Set_actor_subsample_weight( double value );
		double	Set_actor_weight( double value );

		// begin MembersDump
		//   group=<unknown token type>
		//   group=double
		double	actor_subsample_weight;
		double	actor_weight;
		TIME	age;
		double	case_seed;
		TIME	time;
		TIME	duration__max_value_out;
		TIME	duration__min_value_out;
		//   group=float
		//   group=long
		long	actor_id;
		long	case_id;
		//   group=ulong
		//   group=int
		DISEASE_STATE	mother_disease_status_fm : 4;
		DISEASE_STATE	mother_disease_status_dl : 4;
		DISEASE_STATE	lMother_disease_status : 4;
		//   group=uint
		logical	alive : 1;
		REPORT_TIME	report_time : 8;
		logical	actorset_filter_asAllChild : 1;
		logical	alive_value_in : 1;
		logical	table_filter_DurationOfLifeChild : 1;
		logical	table_filter_DurationOfLifeChildHM : 1;
		logical	table_filter_Infection_count_dl : 1;
		logical	table_filter_Infection_count_fm : 1;
		logical	table_filter_InfectionAgeHist_dl : 1;
		logical	table_filter_InfectionAgeHist_fm : 1;
		logical	__finished : 1;
		//   group=short
		//   group=ushort
		counter	table_unit_Infection_count_dl;
		counter	table_unit_Infection_count_fm;
		//   group=char
		//   group=uchar
		// end MembersDump

};

class ChildStateFunctions {
	public:
		ChildStateFunctions() { };
		class Child	*poParent;
		class ChildDerivedStates	*poDerivedStates;

		// state special functions
		long	Set_actor_id( long value ){ return poParent->actor_id = value; };
		double	Set_actor_subsample_weight( double value ){ return poParent->actor_subsample_weight = value; };
		double	Set_actor_weight( double value ){ return poParent->actor_weight = value; };
		TIME	Set_age( TIME value, bool bStartFunction = false );
		logical	Set_alive( logical value );
		long	Set_case_id( long value ){ return poParent->case_id = value; };
		double	Set_case_seed( double value ){ return poParent->case_seed = value; };
		DISEASE_STATE	Set_mother_disease_status_fm( DISEASE_STATE value );
		REPORT_TIME	Set_report_time( REPORT_TIME value );
		counter	Set_table_unit_Infection_count_dl( counter value );
		counter	Set_table_unit_Infection_count_fm( counter value );
		TIME	Set_time( TIME value, bool bStartFunction = false ){ return poParent->time = value; };
		logical	Set_actorset_filter_asAllChild( logical value );
		logical	Set_alive_value_in( logical value );
		TIME	Set_duration__max_value_out( TIME value );
		TIME	Get_duration__max_value_out();
		TIME	Set_duration__min_value_out( TIME value );
		TIME	Get_duration__min_value_out();
		DISEASE_STATE	Set_mother_disease_status_dl( DISEASE_STATE value );
		logical	Set_table_filter_DurationOfLifeChild( logical value );
		logical	Set_table_filter_DurationOfLifeChildHM( logical value );
		logical	Set_table_filter_Infection_count_dl( logical value );
		logical	Set_table_filter_Infection_count_fm( logical value );
		logical	Set_table_filter_InfectionAgeHist_dl( logical value );
		logical	Set_table_filter_InfectionAgeHist_fm( logical value );
		DISEASE_STATE	Set_lMother_disease_status( DISEASE_STATE value );
};

class ChildDerivedStates {
	public:
		ChildDerivedStates() { };
		class Child	*poParent;
		class ChildStateFunctions	*poStateFunctions;

		// derived state variables and their special functions
		TIME	Set_duration_( TIME value );
		TIME	Get_duration_() { return duration_ + poParent->__time - duration__time; };
		counter	Set_entrances_alive_FALSE( counter value );
		counter	Set_entrances_mother_disease_status_dl_INFECTED( counter value );
		counter	Set_entrances_mother_disease_status_fm_INFECTED( counter value );
		INFECTION_AGES	Set_sssplit_age_INFECTION_AGES( INFECTION_AGES value );

		// begin MembersDump
		//   group=<unknown token type>
		//   group=double
		TIME	duration_;
		TIME	duration__time;
		TIME	sssplit_age_INFECTION_AGES_time;
		//   group=float
		//   group=long
		//   group=ulong
		//   group=int
		//   group=uint
		INFECTION_AGES	sssplit_age_INFECTION_AGES : 4;
		//   group=short
		//   group=ushort
		counter	entrances_alive_FALSE;
		counter	entrances_mother_disease_status_dl_INFECTED;
		counter	entrances_mother_disease_status_fm_INFECTED;
		//   group=char
		//   group=uchar
		// end MembersDump

};

class MotherTable {
	public:
		MotherTable() { };

		// begin MembersDump
		//   group=<unknown token type>
		//   group=double
		double	tab6events;
		double	tab7events;
		double	tab8events;
		double	tab9events;
		double	tab10events;
		double	tab11events;
		double	tab11events0;
		double	tab11events1;
		double	tab12events;
		//   group=float
		real	tab6open0;
		real	tab6close0;
		real	tab7open0;
		real	tab7close0;
		real	tab8open0;
		real	tab8close0;
		real	tab9open0;
		real	tab9close0;
		real	tab10open0;
		real	tab10close0;
		real	tab10open1;
		real	tab10close1;
		real	tab10open2;
		real	tab10close2;
		real	tab10open3;
		real	tab10close3;
		real	tab11open0;
		real	tab11close0;
		real	tab11prev0;
		real	tab11open1;
		real	tab11close1;
		real	tab11prev1;
		real	tab12open0;
		real	tab12close0;
		real	tab12open1;
		real	tab12close1;
		//   group=long
		//   group=ulong
		index	tab6cell;
		index	tab6total_cell;
		index	tab7cell;
		index	tab7total_cell;
		index	tab8cell;
		index	tab8total_cell;
		index	tab9cell;
		index	tab9total_cell;
		index	tab10cell;
		index	tab10total_cell;
		index	tab11cell;
		index	tab11total_cell;
		index	tab12cell;
		index	tab12total_cell;
		//   group=int
		//   group=uint
		logical	tab6dim_filter : 1;
		logical	tab7dim_filter : 1;
		logical	tab8dim_filter : 1;
		logical	tab9dim_filter : 1;
		logical	tab10dim_filter : 1;
		logical	tab11dim_filter : 1;
		logical	tab12dim_filter : 1;
		//   group=short
		//   group=ushort
		//   group=char
		//   group=uchar
		// end MembersDump

};

class Mother : public ActorClass {
	public:
		TIME	__time;
		double	__events;
		class MotherStateFunctions	*poStateFunctions;
		class MotherDerivedStates	*poDerivedStates;
		class MotherTable	tableinfo;
		void *operator new( size_t count );

		// links to other actors
		class Mother_mlChild	*mlChild;

		// user-supplied data members

		// user-supplied and required functions
		Mother() { };
		void Finish ( ) ; 
		void Start ( ) ; 

		// special functions generated by the pre-compiler
		Mother( BOOL bInit ) { InitActor(); };
		~Mother() { DeleteActor(); };
		void	InitActor();
		void	DeleteActor();
		void	InitializeStates();
		void	UpdateLinkedStates();
		void	StartSpecial1();
		void	StartSpecial2();
		void	FinishSpecial();
		void	WaitUntil( double target_time );
		Mother	*UpdateTime( );
		void	WaitUntilThisActor(double target_time);
		void	WaitSpecial( TIME wait_time );

		// actor set nodes
		ActorSetNode	*poasAllMother;

		// event functions and variables
		void __fastcall	ScheduleEvent();
		TIME __fastcall	timeScheduleEvent();
		Event	*poScheduleEvent;
		TIME schedule_event_time;
		void __fastcall	BirthEvent();
		TIME __fastcall	timeBirthEvent();
		Event	*poBirthEvent;
		void __fastcall	InfectionEvent();
		TIME __fastcall	timeInfectionEvent();
		Event	*poInfectionEvent;
		void __fastcall	InfMortRNGEvent();
		TIME __fastcall	timeInfMortRNGEvent();
		Event	*poInfMortRNGEvent;
		void __fastcall	MortalityEvent();
		TIME __fastcall	timeMortalityEvent();
		Event	*poMortalityEvent;

		// event processing functions
		double	EventTime( int nEventNum, int *pnEventInfo );
		void	Implement( int nEventNum, int nEventInfo );

		// state variables and their special functions
		long	Get_actor_id() { return actor_id; };
		double	Set_actor_subsample_weight( double value );
		double	Set_actor_weight( double value );

		// begin MembersDump
		//   group=<unknown token type>
		//   group=double
		double	actor_subsample_weight;
		double	actor_weight;
		TIME	age;
		double	case_seed;
		double	inf_mortality_draw;
		TIME	time;
		TIME	duration__max_value_out;
		TIME	duration__min_value_out;
		//   group=float
		real	value_at_entrances_disease_status_INFECTED_age_event;
		//   group=long
		long	actor_id;
		long	case_id;
		//   group=ulong
		//   group=int
		DISEASE_STATE	disease_status : 4;
		//   group=uint
		logical	alive : 1;
		logical	inf_mortality_rng : 1;
		LIFE	number_children : 7;
		REPORT_TIME	report_time : 8;
		VAN_DER_PAAL_INDX	vdp_age_at_infection : 3;
		logical	actorset_filter_asAllMother : 1;
		logical	alive_value_in : 1;
		logical	final_tracking : 1;
		LIFE	integer_age : 7;
		LIFE	number_children_link : 7;
		logical	table_filter_ageAtBirth : 1;
		logical	table_filter_DurationOfLife : 1;
		logical	table_filter_FertDetails : 1;
		logical	table_filter_FertDetailsLink : 1;
		logical	table_filter_FertDetailsSum : 1;
		logical	table_filter_InfectionAge : 1;
		logical	table_filter_InfectionAgeHist : 1;
		logical	tracking : 1;
		VAN_DER_PAAL_INDX	vdp_age_int : 3;
		logical	__finished : 1;
		//   group=short
		//   group=ushort
		counter	table_unit_FertDetails;
		counter	entrances_disease_status_INFECTED_event;
		counter	count_mlChild;
		//   group=char
		//   group=uchar
		// end MembersDump

};

class MotherStateFunctions {
	public:
		MotherStateFunctions() { };
		class Mother	*poParent;
		class MotherDerivedStates	*poDerivedStates;

		// state special functions
		long	Set_actor_id( long value );
		double	Set_actor_subsample_weight( double value ){ if ( poParent->actor_subsample_weight != value && poParent->bUpdates ) if ( poParent->tracking ) TrackChange( poParent->actor_id, (double) poParent->__time, 31, value );
return poParent->actor_subsample_weight = value; };
		double	Set_actor_weight( double value ){ if ( poParent->actor_weight != value && poParent->bUpdates ) if ( poParent->tracking ) TrackChange( poParent->actor_id, (double) poParent->__time, 32, value );
return poParent->actor_weight = value; };
		TIME	Set_age( TIME value, bool bStartFunction = false );
		logical	Set_alive( logical value );
		long	Set_case_id( long value ){ if ( poParent->case_id != value && poParent->bUpdates ) if ( poParent->tracking ) TrackChange( poParent->actor_id, (double) poParent->__time, 35, value );
return poParent->case_id = value; };
		double	Set_case_seed( double value ){ if ( poParent->case_seed != value && poParent->bUpdates ) if ( poParent->tracking ) TrackChange( poParent->actor_id, (double) poParent->__time, 36, value );
return poParent->case_seed = value; };
		DISEASE_STATE	Set_disease_status( DISEASE_STATE value );
		double	Set_inf_mortality_draw( double value );
		logical	Set_inf_mortality_rng( logical value );
		LIFE	Set_number_children( LIFE value );
		LIFE	PlusPlusSet_number_children() { LIFE old_value; old_value = poParent->number_children;
			Set_number_children((LIFE) (poParent->number_children + 1)); return old_value; };
		REPORT_TIME	Set_report_time( REPORT_TIME value );
		counter	Set_table_unit_FertDetails( counter value );
		TIME	Set_time( TIME value, bool bStartFunction = false ){ if ( poParent->time != value && poParent->bUpdates ) if ( poParent->tracking ) TrackChange( poParent->actor_id, (double) poParent->__time, 43, value );
return poParent->time = value; };
		VAN_DER_PAAL_INDX	Set_vdp_age_at_infection( VAN_DER_PAAL_INDX value );
		logical	Set_actorset_filter_asAllMother( logical value );
		logical	Set_alive_value_in( logical value );
		TIME	Set_duration__max_value_out( TIME value );
		TIME	Get_duration__max_value_out();
		TIME	Set_duration__min_value_out( TIME value );
		TIME	Get_duration__min_value_out();
		counter	Set_entrances_disease_status_INFECTED_event( counter value );
		logical	Set_final_tracking( logical value ){ if ( poParent->final_tracking != value && poParent->bUpdates ) if ( poParent->tracking ) TrackChange( poParent->actor_id, (double) poParent->__time, 54, value );
return poParent->final_tracking = value; };
		LIFE	Set_integer_age( LIFE value );
		LIFE	Set_number_children_link( LIFE value );
		logical	Set_table_filter_ageAtBirth( logical value );
		logical	Set_table_filter_DurationOfLife( logical value );
		logical	Set_table_filter_FertDetails( logical value );
		logical	Set_table_filter_FertDetailsLink( logical value );
		logical	Set_table_filter_FertDetailsSum( logical value );
		logical	Set_table_filter_InfectionAge( logical value );
		logical	Set_table_filter_InfectionAgeHist( logical value );
		logical	Set_tracking( logical value );
		real	Set_value_at_entrances_disease_status_INFECTED_age_event( real value );
		VAN_DER_PAAL_INDX	Set_vdp_age_int( VAN_DER_PAAL_INDX value );
		counter	Set_count_mlChild( counter value );
};

class MotherDerivedStates {
	public:
		MotherDerivedStates() { };
		class Mother	*poParent;
		class MotherStateFunctions	*poStateFunctions;

		// derived state variables and their special functions
		counter	Set_changes_number_children( counter value );
		TIME	Set_duration_( TIME value );
		TIME	Get_duration_() { return duration_ + poParent->__time - duration__time; };
		counter	Set_entrances_alive_FALSE( counter value );
		counter	Set_entrances_disease_status_INFECTED( counter value );
		counter	Set_ssint_age( counter value );
		INFECTION_AGES	Set_sssplit_age_INFECTION_AGES( INFECTION_AGES value );
		VAN_DER_PAAL_AGES	Set_sssplit_age_VAN_DER_PAAL_AGES( VAN_DER_PAAL_AGES value );
		integer	Set_value_at_entrances_alive_FALSE_number_children( integer value );
		integer	Set_value_at_entrances_alive_FALSE_number_children_link( integer value );
		real	Set_value_at_entrances_disease_status_INFECTED_age( real value );

		// begin MembersDump
		//   group=<unknown token type>
		//   group=double
		TIME	duration_;
		TIME	duration__time;
		TIME	ssint_age_time;
		TIME	sssplit_age_INFECTION_AGES_time;
		TIME	sssplit_age_VAN_DER_PAAL_AGES_time;
		//   group=float
		real	value_at_entrances_disease_status_INFECTED_age;
		//   group=long
		//   group=ulong
		//   group=int
		//   group=uint
		INFECTION_AGES	sssplit_age_INFECTION_AGES : 4;
		VAN_DER_PAAL_AGES	sssplit_age_VAN_DER_PAAL_AGES : 3;
		//   group=short
		integer	value_at_entrances_alive_FALSE_number_children;
		integer	value_at_entrances_alive_FALSE_number_children_link;
		//   group=ushort
		counter	changes_number_children;
		counter	entrances_alive_FALSE;
		counter	entrances_disease_status_INFECTED;
		counter	ssint_age;
		//   group=char
		//   group=uchar
		// end MembersDump

};

class Ticker : public ActorClass {
	public:
		TIME	__time;
		double	__events;
		class TickerStateFunctions	*poStateFunctions;
		class TickerDerivedStates	*poDerivedStates;
		void *operator new( size_t count );

		// links to other actors

		// user-supplied data members

		// user-supplied and required functions
		Ticker() { };
		void Finish ( ) ; 
		void Start ( ) ; 

		// special functions generated by the pre-compiler
		Ticker( BOOL bInit ) { InitActor(); };
		~Ticker() { DeleteActor(); };
		void	InitActor();
		void	DeleteActor();
		void	InitializeStates();
		void	UpdateLinkedStates();
		void	StartSpecial1();
		void	StartSpecial2();
		void	FinishSpecial();
		void	WaitUntil( double target_time );
		Ticker	*UpdateTime( );
		void	WaitUntilThisActor(double target_time);
		void	WaitSpecial( TIME wait_time );

		// event functions and variables
		void __fastcall	TickEvent();
		TIME __fastcall	timeTickEvent();
		Event	*poTickEvent;

		// event processing functions
		double	EventTime( int nEventNum, int *pnEventInfo );
		void	Implement( int nEventNum, int nEventInfo );

		// state variables and their special functions
		long	Get_actor_id() { return actor_id; };
		double	Set_actor_subsample_weight( double value );
		double	Set_actor_weight( double value );

		// begin MembersDump
		//   group=<unknown token type>
		//   group=double
		double	actor_subsample_weight;
		double	actor_weight;
		TIME	age;
		double	case_seed;
		TIME	next_tick;
		TIME	time;
		//   group=float
		//   group=long
		long	actor_id;
		long	case_id;
		//   group=ulong
		//   group=int
		//   group=uint
		REPORT_TIME	report_time : 8;
		logical	__finished : 1;
		//   group=short
		//   group=ushort
		//   group=char
		//   group=uchar
		// end MembersDump

};

class TickerStateFunctions {
	public:
		TickerStateFunctions() { };
		class Ticker	*poParent;
		class TickerDerivedStates	*poDerivedStates;

		// state special functions
		long	Set_actor_id( long value ){ return poParent->actor_id = value; };
		double	Set_actor_subsample_weight( double value ){ return poParent->actor_subsample_weight = value; };
		double	Set_actor_weight( double value ){ return poParent->actor_weight = value; };
		TIME	Set_age( TIME value, bool bStartFunction = false ){ return poParent->age = value; };
		long	Set_case_id( long value ){ return poParent->case_id = value; };
		double	Set_case_seed( double value ){ return poParent->case_seed = value; };
		TIME	Set_next_tick( TIME value );
		REPORT_TIME	Set_report_time( REPORT_TIME value );
		TIME	Set_time( TIME value, bool bStartFunction = false ){ return poParent->time = value; };
};

class TickerDerivedStates {
	public:
		TickerDerivedStates() { };
		class Ticker	*poParent;
		class TickerStateFunctions	*poStateFunctions;

		// derived state variables and their special functions

		// begin MembersDump
		//   group=<unknown token type>
		//   group=double
		//   group=float
		//   group=long
		//   group=ulong
		//   group=int
		//   group=uint
		//   group=short
		//   group=ushort
		//   group=char
		//   group=uchar
		// end MembersDump

};

// global actor declarations
extern Thread Child	*gpoEmptyChild;
typedef CTypedPtrArray<CObArray, Child*> ChildArray;
void	DeleteAllChildActors();
extern Thread Mother	*gpoEmptyMother;
typedef CTypedPtrArray<CObArray, Mother*> MotherArray;
void	DeleteAllMotherActors();
extern Thread Ticker	*gpoEmptyTicker;
typedef CTypedPtrArray<CObArray, Ticker*> TickerArray;
void	DeleteAllTickerActors();

class Mother_mlChild : public CObject {
	public:
		Mother_mlChild( Mother *pObject ) { prParentMother = pObject; };
		void	Add( Child *prChild );
		void	Remove( Child *prChild );
		void	RemoveAll();
		void	Finish();
		void	FinishAll();
		Child	*GetNext( int nInitPos, int *pnPos );
		counter	Count();
		void	UpdateReferences();
		Mother	*prParentMother;
		ChildArray	arData;
};

class asAllChildActorSetTree : public ActorSetTree	{
	public:
		asAllChildActorSetTree() {m_nId = 0;};
		~asAllChildActorSetTree() {};
		Child	* Item(int nIndex) {return (Child *) ActorSetTree::Item(nIndex);};
		Child	* GetRandom(double dRandom) {return (Child *) ActorSetTree::GetRandom(dRandom);};
		int	ActorCompare(ActorClass *poActor1, ActorClass *poActor2);

	private:
		ActorSetNode *RemoveAll() {return ActorSetTree::RemoveAll();}
};
extern Thread asAllChildActorSetTree	*asAllChild;

class asAllMotherActorSetTree : public ActorSetTree	{
	public:
		asAllMotherActorSetTree() {m_nId = 1;};
		~asAllMotherActorSetTree() {};
		Mother	* Item(int nIndex) {return (Mother *) ActorSetTree::Item(nIndex);};
		Mother	* GetRandom(double dRandom) {return (Mother *) ActorSetTree::GetRandom(dRandom);};
		int	ActorCompare(ActorClass *poActor1, ActorClass *poActor2);

	private:
		ActorSetNode *RemoveAll() {return ActorSetTree::RemoveAll();}
};
extern Thread asAllMotherActorSetTree	*asAllMother;


} // namespace 

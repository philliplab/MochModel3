//LABEL(MochModel3, EN) Core simulation functions

/* NOTE(MochModel3, EN)
	This module contains core simulation functions and definitions.
*/

//LABEL(model, EN) Model for HIV-affected Children

/* NOTE(model, EN)
    Purpose:
	
	This model explores the effect of a mother's HIV status on the mother's
	children. Particularly the effect on the children's schooling and HIV
	risk is explored.

	State variables and scales:

	Two types of agents are present in the model - mothers and children.

	Mothers are characterized by these state variables:
	- age
	- disease status (disease_status_detailed)
	- fertile
	- infectible
	- number of children (number_children)
	- List of children (Mother.mlChild[])

	The disease status of the mother is constructed from various other variables (For example showing_symptoms (True/False)).
	Disease status was implemented in this way to allow finer control over when the various events that depend on
	the disease status are rescheduled.

	Children are characterized by these state variables:
	- age
	- gender
	- alive
	- Age of the mother at the birth of the child (mother_age_at_birth)
	- Mother's disease status (mother_disease_status_detailed_fm)
	- school_status
	- abused
	- depressed
	- Mother (Child.lMother)

	All mothers are born at exactly the same time and the model is run for 100 years after the mothers are born. 
	This is long enough to ensure that all children have become adults. Children cannot have children of their own.

	Process overview and scheduling

	The model is implemented in continuous time and is driven by events. Events compete with each other. If an event occurs,
	the state of the agent is updated. Any previously scheduled events that depends on the states that were changed are
	rescheduled. If the state change makes the agent eligible for any events that the agent were not previously eligible for,
	these events are also scheduled as soon as the state of the actor is changed.

	The following processes are present in the agents of the model:
	- Disease progression of the mother (Uninfected, infected, diagnosed, showing symptoms, treated, death)
	- Birth of children
	- School status of the child
	- Abuse status of the child
	- Depression status of the child
	- Death of the child

	Design concepts:
	
	Emergence: 
	
	Proportions of children that complete school or dropout and the risk behaviours of the child emerge from the
	way the status of the mothers affect the children. However, the lives of both the mother and the children are
	completely specified as probabilities.

	Adaptation, fitness-seeking, and sensing:

	The model does not use any of these concepts.

	Interaction:

	The only interaction present in the model is when mothers give birth to children. The associates a child with a mother
	allowing the mother's disease status to affect the probabilities of the child to experience certain events.

	Stochasticity:

	All parameters are stochasically implemented as annual probabilities or are drawn from distributions.
	- HIV-free mortality is implemented as life tables
	- Infected and treated mortality is implemented using smooth survival curves given by 1 - (the CDF of weibull distributions)
	- Fertility, Abuse, Depression and school dropout are implemented from tables of annual probabilities
	- Diagnosis and treatment are implemented as exponential rates
	- School start is implemented as a uniform distribution between 5.5 and 7

	Observation:

	Various tables accumulate counts and summary statistics of quantities of interest. 
	For example frequency tables of the age at infection.

	Initialization:
	
	TODO - Complete this section

	A number of mothers (specified by the StartingPopulation parameter) is created with age 0 at time 0.
	Time 0 in the model corresponds to the year 1985 in the ASSA model.

	An alternative approach might be to vary the ages of the mother according to the life table
	of 1985 in the ASSA model?

	Input

	TODO

	Submodels:

	The submodels are documented elsewhere. In modgen language a submodel is called 
	a module. Follow the modules link below to a table of the modules. From there
	you can access the documentation for each individual submodel.
*/

// The model version number
version 1, 0, 0, 0;

// The model type
model_type time_based, just_in_time;

// The data type used to represent time
time_type double;

// Other data types
real_type		float;
counter_type	ushort;
integer_type	short;
index_type		ulong;

// The following option reduces memory use at the expense of speed
options packing_level=2;

// Supported languages
languages 
{
	EN // English
};

// The Simulation function is called by Modgen to simulate a replicate.
void Simulation()
{
	// Buffer for reporting progress
	const size_t nBufSize = 255;
	char szBuffer[nBufSize];

	// Note replicate number for progress reporting
	int nReplicate = GetReplicate();

	// Create the single ticker actor
	Ticker *paTicker = new Ticker();
	paTicker->Start();

	// Create the starting population
	sprintf_s(szBuffer, nBufSize, "%s %d: %s", ModelString("S_MODEL_REPLICATE"), nReplicate, ModelString("S_MODEL_START"));
	ProgressMessage( szBuffer );

	for ( int nJ = 0; nJ < StartingPopulationSize; nJ++ )
	{
		Mother *paMother = new Mother();
		paMother->Start();
	}

	sprintf_s(szBuffer, nBufSize, "%s %d: %s", ModelString("S_MODEL_REPLICATE"), nReplicate, ModelString("S_MODEL_SIMULATION"));
	ProgressMessage( szBuffer );

	// event loop
	double dCurrentTime = TIME_INFINITE;
	double dStartTime = TIME_INFINITE;

	int nLastProgressPercent = -1;
	int nThisProgressPercent = -1;

	while ( !gpoEventQueue->Empty() ) 
	{

		// get the time of next event, verify against the simulation end
		dCurrentTime = gpoEventQueue->NextEvent();

		// Note the start time (time of first event) for progress indicator
		if ( dStartTime == TIME_INFINITE )
		{
			dStartTime = dCurrentTime;
		}

		if ( dCurrentTime > SIMULATION_END() || gbInterrupted || gbCancelled || gbErrors )
		{
			if (dCurrentTime > SIMULATION_END())
			{
				// age all actors to the simulation end time
				gpoEventQueue->WaitUntilAllActors( SIMULATION_END() );
			}

			sprintf_s(szBuffer, nBufSize, "%s %d: %s", ModelString("S_MODEL_REPLICATE"), nReplicate, ModelString("S_MODEL_FINISH"));
			ProgressMessage( szBuffer );

			gpoEventQueue->FinishAllActors();
		}
		else 
		{
			// age all actors to the time of next event
			gpoEventQueue->WaitUntil( dCurrentTime );

			// implement the next event
			gpoEventQueue->Implement();
		}

		// Update progress indicator only if the integer percentage complete changes
		// (updates to the progress bar at every event are expensive).
		nThisProgressPercent = (int)( 100 * ( dCurrentTime - dStartTime ) /
		                                    ( SIMULATION_END() - dStartTime ) );

		if ( nThisProgressPercent > nLastProgressPercent )
		{
			TimeReport( dCurrentTime );	// update simulation progress
			nLastProgressPercent = nThisProgressPercent;
		}
	}
}
